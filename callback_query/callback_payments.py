from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy import select

from database.models import async_session, PaymentRecord
from keyboards.inline_keyboard import paid_keyboard, check_pay
from payments.yookassa_pay import create_payment, check_payment_and_send_key

tariff_router = Router()

# –¢–∞—Ä–∏—Ñ—ã –∏ –∏—Ö —Ü–µ–Ω—ã
TARIFF_PRICES = {
    "month": 250.00,
    "three_month": 650.00,
    "six_month": 1200.00
}


# –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
@tariff_router.callback_query(F.data.startswith("tariff_"))
async def select_tariff(callback: CallbackQuery):
    tariff_key = callback.data.split("_", 1)[1]  # 'month', 'three_month', 'six_month'

    titles = {
        "month": "üëå –î–æ—Å—Ç—É–ø: 1 –º–µ—Å—è—Ü",
        "three_month": "‚ö°Ô∏è –î–æ—Å—Ç—É–ø: 3 –º–µ—Å—è—Ü–∞",
        "six_month": "üî• –î–æ—Å—Ç—É–ø: 6 –º–µ—Å—è—Ü–µ–≤"
    }

    text = titles.get(tariff_key, "–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ")
    await callback.message.answer(text, reply_markup=await paid_keyboard(tariff_key))


# –û–ø–ª–∞—Ç–∞ –ø–æ —Ç–∞—Ä–∏—Ñ—É ‚Üí —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É
@tariff_router.callback_query(F.data.startswith("pay_"))
async def pay_tariff(callback: CallbackQuery):
    tariff_key = callback.data.split("_", 1)[1]

    amount = TARIFF_PRICES.get(tariff_key)
    if amount is None:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    payment_url = create_payment(amount, callback.from_user.id, tariff_key)
    await callback.message.answer(
        f"üí∏ –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_url}",
        reply_markup= await check_pay(),
        disable_web_page_preview=True
    )


@tariff_router.callback_query(F.data == "check_payment")
async def manual_check(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with async_session() as session:
        result = await session.execute(
            select(PaymentRecord).where(
                PaymentRecord.user_id == user_id,
                PaymentRecord.is_paid == False
            ).order_by(PaymentRecord.id.desc()).limit(1)
        )
        payment_record = result.scalar_one_or_none()

    if payment_record:
        await check_payment_and_send_key(payment_record.payment_id, user_id, callback.bot)
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É...", show_alert=False)
    else:
        await callback.message.answer("‚ùóÔ∏è–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
